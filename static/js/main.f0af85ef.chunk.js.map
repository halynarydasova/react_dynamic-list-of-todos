{"version":3,"sources":["types/SelectType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectType","TodoList","todos","onSelect","selectedTodoId","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","React","memo","filterStatus","onFilterStatusChange","query","setQuery","value","onChange","event","target","all","active","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","author","setAuthor","isUserLoading","setIsUserLoading","useEffect","userId","finally","href","email","name","App","setTodos","isLoading","setIsLoading","choosenTodoId","setChoosenTodoId","selectFilter","setSelectFilter","result","choseenTodo","useMemo","find","visibleTodos","filteredTodos","filter","normalizedQuery","trim","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0af85ef.chunk.js","sourcesContent":["export enum SelectType {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[] | null;\n  selectedTodoId: number;\n  onSelect: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n  selectedTodoId,\n}) => (\n  <>\n    {todos\n      ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  key={id}\n                  className={classNames({\n                    'has-background-info-light': todo.id === selectedTodoId,\n                  })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-success': completed,\n                        'has-text-danger': !completed,\n                      })}\n                    >\n                      {title}\n\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => {\n                        onSelect(id);\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames(\n                          'far',\n                          { 'fa-eye': id !== selectedTodoId },\n                          { 'fa-eye-slash': id === selectedTodoId },\n                        )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )\n      : (<p>No data received</p>)}\n  </>\n);\n","import React from 'react';\nimport { SelectType } from '../../types/SelectType';\n\ntype Props = {\n  filterStatus: SelectType;\n  onFilterStatusChange: (value: SelectType) => void;\n  query: string;\n  setQuery: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  filterStatus,\n  onFilterStatusChange,\n  query,\n  setQuery,\n}) => {\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onFilterStatusChange(event.target.value as SelectType);\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterStatus}\n            onChange={handleSelectChange}\n          >\n            <option value={SelectType.all}>All</option>\n            <option value={SelectType.active}>Active</option>\n            <option value={SelectType.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearchChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {(query !== '')\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => {\n                  setQuery('');\n                  onFilterStatusChange(SelectType.all);\n                }}\n              />\n            </span>\n          )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo | undefined;\n  onClose: (id: number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [author, setAuthor] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(false);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n\n    if (todo) {\n      getUser(todo.userId)\n        .then(setAuthor)\n        .finally(() => setIsUserLoading(false));\n    }\n  }, []);\n\n  return (\n    <>\n      <div\n        className=\"modal is-active\"\n        data-cy=\"modal\"\n      >\n        <div className=\"modal-background\" />\n        {isUserLoading\n          ? (\n            <Loader />\n          )\n          : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  Todo #\n                  {todo?.id}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={() => onClose(0)}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {todo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {/* <strong className=\"has-text-success\">Done</strong> */}\n                  {todo?.completed\n                    ? (<strong className=\"has-text-success\">Done</strong>)\n                    : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n                  {' by '}\n\n                  <a href={`mailto:${author?.email}`}>\n                    {author?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )}\n      </div>\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SelectType } from './types/SelectType';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [choosenTodoId, setChoosenTodoId] = useState(0);\n  const [selectFilter, setSelectFilter] = useState(SelectType.all);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(result => setTodos(result))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const choseenTodo = useMemo(() => {\n    return todos.find(todo => todo.id === choosenTodoId);\n  }, [choosenTodoId, todos]);\n\n  const visibleTodos = useMemo(() => {\n    let filteredTodos = todos;\n\n    switch (selectFilter) {\n      case SelectType.active:\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n      case SelectType.completed:\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n      default:\n        break;\n    }\n\n    const normalizedQuery = query.trim().toLowerCase();\n\n    return filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(normalizedQuery)\n    ));\n  }, [todos, selectFilter, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterStatus={selectFilter}\n                onFilterStatusChange={setSelectFilter}\n                query={query}\n                setQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList todos={visibleTodos} onSelect={setChoosenTodoId} selectedTodoId={choosenTodoId} />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {choosenTodoId\n        && (\n          <TodoModal todo={choseenTodo} onClose={setChoosenTodoId} />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}